---
- name: ensure certain groups exist
  group:
    name: "{{ item }}"
  with_items:
  - sankey
  - data
- name: ensure the sankey user exists
  user:
    name: sankey
    createhome: yes
    group: sankey
    groups: sudo,data,www-data
- name: ensure my key is in .ssh/authorized_keys
  script: "findsum.sh {{ PUBKEY_SHA512 }} /home/sankey/.ssh/authorized_keys"
  register: authorized_keys
  changed_when: false  # the findsum.sh script never modifies files
  check_mode: no
- name: fail if we can't login via pubkey
  fail:
    msg: >
      Could not find an appropriate ssh public key.  Failing ansible to prevent
      lockout.
  when: authorized_keys.rc != 0

# If this is the first time running this role, it will fail before this line
# and I will probably go run ssh-copy-id and re-run this role.

# among other things, the following task will DISABLE PASSWORD-ONLY LOGINS
- name: install our sshd_config
  template:
    src: sshd_config
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: 0644
  register: sshd_config_install
- name: check sshd_config validity
  command: sshd -t
  changed_when: false
- name: reload sshd if we changed the config
  service:
    name: sshd
    state: reloaded
  when: sshd_config_install|changed

# a place to put random scripts
- name: scripts directory
  file:
    path: "{{ SCRIPTS }}"
    state: directory
    owner: root
    mode: 0755

# nginx
- name: install nginx and stuff
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
  # this version of nginx comes with WebDAV
  - nginx-extras
  - fcgiwrap
- name: setup vhosts.h
  file:
    path: /etc/nginx/vhosts.d
    state: directory
    mode: 0755
    owner: root
    group: root
- name: enable custom configuration
  template:
    src: custom.conf
    dest: /etc/nginx/conf.d/99-custom.conf

- name: install a few apt packages
  apt:
    name: "{{ item }}"
    state: latest
  with_items: "{{ PACKAGES.apt }}"

# npm stuff, so the npm module works
- name: install nodesource repository apt key
  apt_key:
    url: "{{ REPOSITORIES.nodesource.key_url }}"
    state: present
- name: install nodesource repository
  apt_repository:
    repo: "{{ REPOSITORIES.nodesource.repo }}"
    state: present
- name: make sure the jessie node packages are uninstalled
  apt:
    name: "{{ item }}"
    state: absent
  with_items:
  - nodejs-legacy
  - npm
- name: install nodejs
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
  - nodejs

# other software
- name: install other software
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
  - vim
  - mosh
